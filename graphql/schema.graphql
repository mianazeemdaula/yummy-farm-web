"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")



"A geopoint"
scalar GeoPoint @scalar(class: "App\\GraphQL\\Scalars\\GeoPoint")
scalar JSON @scalar(class: "App\\GraphQL\\Scalars\\JSON")


type Query {
    users(role: String @where(operate:"=")): [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
    me: User @auth(guard: "sanctum")

    test(role: String @eq, email: String @eq): [User!]! @all

    nearestSellers(role: String, lat: Float, lng: Float) : [User!]

    # instruments
    instrument(id: ID @eq): Instrument @find
}

type Plan{
    id: ID!
    name: String!
    users: [User!]! @hasMany
}

type User {
    id: ID!
    name: String!
    email: String!
    image: String!
    fcm_token: String
    role: String!
    firstname: String
    username: String
    business_name: String
    number: String @rename(attribute: "seller_number")
    address_one: String
    address_two: String
    phone: String
    vat: String
    bank_account: String
    rpr: String
    enable_notification: Boolean
    status: String
    location: GeoPoint
    created_at: DateTime!
    updated_at: DateTime!
    plan: Plan @belongsTo
    # userable: Userable! @morphTo
    notifications: [Notification] @hasMany
    # times: [TutorTime!]! @hasMany(relation:"tutorTimes")
}

type Notification{
    id: ID!
    title: String!
    body: String!
    is_read: Boolean!
    data: JSON
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
}

type Student{
    id: ID!
    in_search: Boolean
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @morphOne
}

type Seller{
    id: ID!
    bio: String!
    in_search: Boolean
    time_zone: String!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @morphOne
}




type Instrument{
    id: ID!
    name: String!
    logo: String!
    status: Boolean!
    tutor: [User!]! @belongsToMany(relation:"tutors")
}

type TutorTime{
    id: ID!
    from_time: DateTime!
    to_time: DateTime!
    user: User! @belongsTo
}


union Userable = Customer | Seller
